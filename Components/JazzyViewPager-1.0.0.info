{"Name":"Jazzy ViewPager","Id":2156,"Alias":"JazzyViewPager","Description":"\nAn easy to use `ViewPager` that adds an awesome set of custom swiping animations. \n\n## Usage\n\nThere are several animations that can be used, and many more can be created:\n\n * Standard (deafult animation)\n * Accordion\n * Cube\n * Fade\n * Flip\n * FlipAway\n * RotateUp\n * RotateDown\n * Stack\n * Tablet\n * Zoom\n\nThe `JazzyViewPager` is a small extension to the support `ViewPager`\nand functions very much the same:\n\n    JazzyViewPager jazzy = ...\n    jazzy.TransitionEffect = JazzyEffects.Tablet;\n    jazzy.Adapter = new MyJazzyAdapter(jazzy);\n    \nThe adapter is also an extension, but with the additional support for tracking \nthe pages using the `SetObjectForPosition` and `FindViewFromObject` methods:\n\n    private class MyJazzyAdapter : JazzyPagerAdapter\n    {\n\t\tpublic MainAdapter(JazzyViewPager jazzy)\n\t\t\t: base(jazzy)\n\t\t{\n\t\t}\n\n\t\tpublic override Java.Lang.Object InstantiateItem(\n            ViewGroup container, int position)\n\t\t{\n            // create and add the view\n\t\t\tvar view = ...\n\t\t\tcontainer.AddView(\n                view, \n                ViewGroup.LayoutParams.MatchParent, \n                ViewGroup.LayoutParams.MatchParent);\n                \n            // let the jazzy bit know about the object\n\t\t\tSetObjectForPosition(view, position);\n            \n            // continue as normal\n\t\t\treturn view;\n\t\t}\n\n\t\tpublic override void DestroyItem(\n            ViewGroup container, int position, Java.Lang.Object obj)\n\t\t{\n            // get the real view from the jazzy bit\n            var view = FindViewFromObject(position);\n            \n            // continue as normal\n\t\t\tcontainer.RemoveView(view);\n\t\t}\n\t}\n    \n","Version":"1.0.0","Summary":"An easy to use ViewPager that adds an awesome set of custom swiping animations.","QuickStart":"\nAn easy to use `ViewPager` that adds an awesome set of custom swiping animations. \n\n## Usage\n\nThere are several animations that can be used, and many more can be created:\n\n * Standard (deafult animation)\n * Accordion\n * Cube\n * Fade\n * Flip\n * FlipAway\n * RotateUp\n * RotateDown\n * Stack\n * Tablet\n * Zoom\n\nThe `JazzyViewPager` is a small extension to the support `ViewPager`\nand functions very much the same:\n\n    JazzyViewPager jazzy = ...\n    jazzy.TransitionEffect = JazzyEffects.Tablet;\n    jazzy.Adapter = new MyJazzyAdapter(jazzy);\n    \nThe adapter is also an extension, but with the additional support for tracking \nthe pages using the `SetObjectForPosition` and `FindViewFromObject` methods:\n\n    private class MyJazzyAdapter : JazzyPagerAdapter\n    {\n\t\tpublic MainAdapter(JazzyViewPager jazzy)\n\t\t\t: base(jazzy)\n\t\t{\n\t\t}\n\n\t\tpublic override Java.Lang.Object InstantiateItem(\n            ViewGroup container, int position)\n\t\t{\n            // create and add the view\n\t\t\tvar view = ...\n\t\t\tcontainer.AddView(\n                view, \n                ViewGroup.LayoutParams.MatchParent, \n                ViewGroup.LayoutParams.MatchParent);\n                \n            // let the jazzy bit know about the object\n\t\t\tSetObjectForPosition(view, position);\n            \n            // continue as normal\n\t\t\treturn view;\n\t\t}\n\n\t\tpublic override void DestroyItem(\n            ViewGroup container, int position, Java.Lang.Object obj)\n\t\t{\n            // get the real view from the jazzy bit\n            var view = FindViewFromObject(position);\n            \n            // continue as normal\n\t\t\tcontainer.RemoveView(view);\n\t\t}\n\t}\n    \n## Custom Animations\n\nWe can implement the `IJazzyEffect` interface to create a custom animation:\n\n    public interface IJazzyEffect\n    {\n        void Animate(\n            JazzyViewPager viewPager, \n            View left, \n            View right, \n            float positionOffset, \n            float positionOffsetPixels);\n    }\n\nAs an example, to create a fade animation:\n\n    public class FadeEffect : JazzyEffect\n    {\n        public override void Animate(\n            JazzyViewPager viewPager,\n            View left, \n            View right, \n            float positionOffset, \n            float positionOffsetPixels)\n        {\n            if (viewPager.State != JazzyState.Idle)\n            {\n                var effectOffset = GetEffectOffset(positionOffset);\n                if (left != null)\n                {\n                    var translate = positionOffsetPixels;\n                    left.Alpha = 1 - effectOffset;\n                    left.TranslationX = translate;\n                }\n                if (right != null)\n                {\n                    right.Alpha = effectOffset;\n                    var translate = \n                        positionOffsetPixels - \n                        viewPager.Width - \n                        viewPager.PageMargin;\n                    right.TranslationX = translate;\n                }\n            }\n        }\n    }\n    \nThen, we can assign this animation to the `JazzyViewPager` using the \n`TransitionEffect` property:\n\n    jazzy.TransitionEffect = new FadeEffect();\n    \n","Hash":"a0e079c3bd84b2c685880eb20b268267","TargetPlatforms":["android"],"TrialHash":null}